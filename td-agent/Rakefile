#!/usr/bin/env rake
#
# fluent-package-builder
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

require 'rake/testtask'
require 'rake/clean'
require 'erb'
require 'shellwords'
require 'pathname'
require 'open-uri'
require 'open3'
require 'digest'
require 'etc'
require 'yaml'
require 'bundler'
require 'logger'
require 'find'
require_relative 'config.rb'
require_relative 'tasks/update-lockfile-task'
require_relative 'tasks/download-task'
require_relative 'tasks/build-task'
require_relative 'tasks/linux-package-task'
require_relative 'tasks/windows-package-task'
require_relative 'tasks/macos-package-task'

DOWNLOADS_DIR  = File.expand_path("downloads")
STAGING_DIR    = File.expand_path(ENV["TD_AGENT_STAGING_PATH"]   || "staging")

@logger = Logger.new(STDOUT, Logger::Severity::INFO)
if ENV["TD_AGENT_LOG_LEVEL"] and ENV["TD_AGENT_LOG_LEVEL"] == "debug"
  @logger = Logger.new(STDOUT, Logger::Severity::DEBUG)
end

CLEAN.include(STAGING_DIR)
CLOBBER.include(DOWNLOADS_DIR)
CLOBBER.include("vendor")

def windows?
  /mswin|mingw/ =~ RUBY_PLATFORM
end

def macos?
  /darwin/ =~ RUBY_PLATFORM
end

def ensure_directory(dirname)
  mkdir_p(dirname) unless File.exists?(dirname)
  if block_given?
    cd(dirname) do
      yield
    end
  end
end

def install_prefix
  "/opt/#{PACKAGE_NAME}"
end

def gem_dir_suffix
  "lib/ruby/gems/#{gem_dir_version}"
end

def gem_dir_version
  if windows?
    ruby_version = BUNDLED_RUBY_INSTALLER_X64_VERSION
  else
    ruby_version = BUNDLED_RUBY_VERSION
  end
  rb_major, rb_minor, rb_teeny = ruby_version.split("-", 2).first.split(".", 3)
  "#{rb_major}.#{rb_minor}.0" # gem path's teeny version is always 0
end

def gemfile_dir
  "."
end

def template_params(params = nil)
  config = {
    project_name: PACKAGE_NAME,
    version: PACKAGE_VERSION,
    install_message: nil,
    pkg_type: nil,
  }

  unless windows?
    path_params = {
      install_path: install_prefix,
      gem_install_path: File.join(install_prefix, gem_dir_suffix),
    }
    config.merge!(path_params)
  end

  if params
    config.merge(params)
  else
    config
  end
end

def template_path(*path_parts)
  File.join('templates', *path_parts)
end

def render_template(dest, src, config, opts={})
  erb_binding = binding
  config.each do |key, value|
    erb_binding.local_variable_set(key, value)
  end

  destination = dest.gsub('td-agent', config[:project_name])
  directory = File.dirname(destination)
  mode = opts.fetch(:mode, 0644)

  logger = opts[:logger] || Logger.new(STDOUT, level: Logger::Severity::INFO)
  logger.info("Generate #{destination}")
  ensure_directory(directory)
  File.open(destination, 'w', mode) do |f|
    template = ERB.new(File.read(src), nil, '<>')
    f.write(template.result(erb_binding))
  end
end

def tar_command
  if windows?
    ["ridk", "exec", "tar"]
  else
    ["tar"]
  end
end

def use_ruby3?
  # Check whether ubuntu 22.04 (jammy) or not
  # Basically, TD Agent adopts ruby 2.7 as default version, but on Ubuntu 22.04,
  # use ruby 3.x because distribution switches to OpenSSL 3.x.
  return false unless File.exist?("/etc/os-release")
  os_release_entries = File.open("/etc/os-release").readlines.map(&:strip)
  return true if os_release_entries.include?("UBUNTU_CODENAME=jammy") and os_release_entries.include?("ID=ubuntu")
  return true if os_release_entries.include?("PLATFORM_ID=\"platform:el9\"")
  return true if os_release_entries.include?("PLATFORM_ID=\"platform:al2022\"")
  return false
end

def bundled_ruby_version
  use_ruby3? ? BUNDLED_RUBY3_VERSION : BUNDLED_RUBY_VERSION
end

def bundled_ruby_source_sha256sum
  use_ruby3? ? BUNDLED_RUBY3_SOURCE_SHA256SUM : BUNDLED_RUBY_SOURCE_SHA256SUM
end


update_lockfile_task = UpdateLockfileTask.new
update_lockfile_task.define

download_task = DownloadTask.new(logger: @logger)
download_task.define

build_task = BuildTask.new(task: download_task, logger: @logger)
build_task.define

linux_package_task = LinuxPackageTask.new(download_task)
linux_package_task.define

windows_package_task = WindowsPackageTask.new
windows_package_task.define

macos_package_task = MacOSPackageTask.new(logger: @logger)
macos_package_task.define
